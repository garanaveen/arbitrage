#!/usr/bin/env python

from notify import checkforpricefluctuations
from exchange import Exchange
from gdax import gdax
from koinex import koinex
from exchangerate import get_exchangerate
from calculatearbitrage import CalculateArbitrage

import projectconfig as cfg
import re

from argparser import opts

import time
import sys

def get_polltime():
   polltimeinseconds = 30 #Default is 30 seconds
   valid = re.compile('[0-9]{1,2}[a-zA-Z]')
   if (valid.match(opts.polltime)):
      unit = opts.polltime[-1]
      if unit == 's':
         multiplier = 1
      elif unit == 'm':
         multiplier = 60
      elif unit == 'h':
         multiplier = 60*60
      number = opts.polltime[0:-1]
      polltimeinseconds = int(number) * multiplier
   return polltimeinseconds

def calculate_arbitrage(quoteType):
    cfg.QUOTETYPE = quoteType
    gex = gdax()
    gex.get_rates()
    #gex.print_price()
    

    koine = koinex()
    koine.get_rates()
    #koine.print_price()

    arb = CalculateArbitrage(koine, gex)
    arb.printarbitrage()

    #buy happens after sell. So do this after last thing happens.
    if not opts.sellonly and not opts.buyonly and cfg.QUOTETYPE == "lowest_ask":
       arb.calculate_spread_between_buy_and_sell()

    #checkforpricefluctuations('KOINEX')
    #checkforpricefluctuations('GDAX')
    

def calculate_spread_between_buy_and_sell():
   
   pass

if __name__ == "__main__":
   polltimeinseconds  = get_polltime()

   while True:
      cfg.MATCHED_IN_PREVIOUS_ITERATION = cfg.MATCHED
      cfg.MATCHED = False

      #TODO : This try really should be moved to get_rates() because thats where the live ticker download could fail.
      try:
         if opts.sellonly:
            calculate_arbitrage("highest_bid") #sell
         elif opts.buyonly:
            calculate_arbitrage("lowest_ask") #buy
         else:
            originalValueOfLiveQuote = cfg.LIVEQUOTE
            calculate_arbitrage("highest_bid") #sell
            cfg.LIVEQUOTE = False
            calculate_arbitrage("lowest_ask") #buy
            cfg.LIVEQUOTE = originalValueOfLiveQuote
            
      except ValueError as valueErr:
         cfg.logger.info("ERROR : ValueError exception occured: {0}".format(valueErr))
      except KeyError as keyErr:
         cfg.logger.info("ERROR : KeyError exception occured for '{0}'. Check if json file was downloaded correctly.".format(keyErr))
      except UnboundLocalError as localError:
         cfg.logger.info("ERROR : UnboundLocalError exception occured: {0}".format(localError))
         cfg.logger.info("ERROR : Is it because of expired exchange rate key? (exchangerateapi.py)")
      except:
         cfg.logger.info("ERROR : Unknown exception : %s, %s, %s" % (sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]))
         
      if(not opts.loop):
         break
      time.sleep(polltimeinseconds)
      cfg.ITERATION += 1
