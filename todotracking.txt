Add TUSD too to the list to get an idea on what the arbitrage %age for stable coin on koinex. Consider its value to be $1 on coinbase.

Add lowest_ask price for koinex

Enums for currencies (viz. LTC, ETH, BTC, BCH)


Store arbitragePercentage to database and print information if lowest buyarbitrage is less than highest sellarbitrage. (storemaxminarbitrage)

Implement parse_args with the following options,
https://docs.python.org/2/library/argparse.html
--exchange (default to gdax-usa and koinex-india)
--notify (accept list of emails to be notified?)
--exchangerate (If this parameter is given then don't download the .exchangerate.json)

Packaging of this so that it can be easily installed and the program can be executed with a command (say "arbitrage")
Example of command,
arbitrage --exchange gdax --exchange koinex --loop --freqency 1m --notify nriarbitrage@gmail.com --verbose

Do exception handling (there is a possiblity of a exception when the downloaded .json files are incorrect due to connectivity issues.)

When json files are downloaded, specify the directory in which they need to be downloaded instead of current directory. If the script is run from home directory, you don't want all those json files in home directory.

Get the live exchange rate (instead of cache) for the next iteration if there is MATCH with myalerts.ini

aws
1 - Set PYTHONPATH such that you can run arbitrage from any directory.
2 - Figure out a way to send email from aws ses,
https://aws.amazon.com/getting-started/tutorials/send-an-email/
3 - Figure out a way to edit myalerts.ini online.


How to access webpage? IP followed Port numberâ€¨
How to serve a webpage?
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html

